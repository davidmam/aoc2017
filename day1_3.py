# -*- coding: utf-8 -*-
"""
Created on Fri Dec  1 07:08:43 2017

@author: David
"""
## Day 1

c = '61697637962276641366442297247367117738114719863473648131982449728688116728695866572989524473392982963976411147683588415878214189996163533584547175794158118148724298832798898333399786561459152644144669959887341481968319172987357989785791366732849932788343772112176614723858474959919713855398876956427631354172668133549845585632211935573662181331613137869866693259374322169811683635325321597242889358147123358117774914653787371368574784376721652181792371635288376729784967526824915192526744935187989571347746222113625577963476141923187534658445615596987614385911513939292257263723518774888174635963254624769684533531443745729344341973746469326838186248448483587477563285867499956446218775232374383433921835993136463383628861115573142854358943291148766299653633195582135934544964657663198387794442443531964615169655243652696782443394639169687847463721585527947839992182415393199964893658322757634675274422993237955354185194868638454891442893935694454324235968155913963282642649968153284626154111478389914316765783434365458352785868895582488312334931317935669453447478936938533669921165437373741448378477391812779971528975478298688754939216421429251727555596481943322266289527996672856387648674166997731342558986575258793261986817177487197512282162964167151259485744835854547513341322647732662443512251886771887651614177679229984271191292374755915457372775856178539965131319568278252326242615151412772254257847413799811417287481321745372879513766235745347872632946776538173667371228977212143996391617974367923439923774388523845589769341351167311398787797583543434725374343611724379399566197432154146881344528319826434554239373666962546271299717743591225567564655511353255197516515213963862383762258959957474789718564758843367325794589886852413314713698911855183778978722558742329429867239261464773646389484318446574375323674136638452173815176732385468675215264736786242866295648997365412637499692817747937982628518926381939279935993712418938567488289246779458432179335139731952167527521377546376518126276'
print( 2*sum([int(c[x]) for x in range(len(c)//2) if c[x] == c[(x+len(c)//2)]] ))

# Day 2

ifh=open('input.txt')
ss = []
for line in ifh.readlines():
    ss.append(sorted([int(x) for x in line.strip().split()]))

total = 0
for group in ss:
    for p in range(len(group)-1):
        for q in range(p+1, len(group)):
            if group[q]%group[p]==0:
                total+=group[q]//group[p]
                print(group[q],group[p], group[q]//group[p])
print(total)

# Day 3


number = 347991


# complete_rings = (number -1) / 8 = sum of range = mid point * n
complete_rings= int((sqrt(number)-1)//2)

number - (296**2)

values = {1:1, 2:1,3:2,4:4,5:5,6:10,7:11,8:23,9:25}

def getxval(x):
    #calculate the n
    if values.get(x):
        #print('retrieving value for ',x,values[x])
        return values[x]
    else:
        #print ('calculating for' , x)
        n=int(sqrt(x)) # side of largest complete square
        n = n- (1 -n%2) # largest odd square
        m = (x - n**2)//(n+1) # number of sides each containing n+1 pieces
        c = (x - n**2)%(n+1) # remainder
        val = getxval(x-1)
        if c==0:
            val = val + getxval((n-2+m//4)**2 +m*(n-1))
            print('getting ', (n-2+m//4)**2 +m*(n-1) )
            if m == 0:
                val = val + getxval((n-2)**2 + 1)
                print('getting ', (n-2+m//4)**2 +m*(n-1) , 'and', (n-2)**2 + 1 )
                
        else:
            if c == 1:
                if m > 0:
                    val += getxval((n-2)**2 +m*(n-1)+c-1)
                    val += getxval((n-2)**2 +m*(n-1)+c)
                    val += getxval(x-2)
                else:
                    val += getxval((n-2)**2 + 1)
            elif c==2 and m==0:
                val += getxval((n-2)**2 + 1)
                val += getxval((n-2)**2 + 2)
                val += getxval(x-2)
                     
            else:
                val += getxval((n-2)**2 + m*(n-1)+c-2)
                index =(n-2)**2 + m*(n-1)+c-1
                
                val += getxval(index)
                if c<n+1:
                    if m ==3 or c<n:
                        val += getxval((n-2)**2 + m*(n-1)+c)
                
        values[x]=val 
        return val
                
# try values for x until the two either side of the input data are found.
getxval(60)            
        